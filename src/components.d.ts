/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Color, Expand, Fill } from "./interface";
import { AcknowledgeEvent } from "./components/hakion-button/hakion-button";
export namespace Components {
    interface HakionButton {
        /**
          * Documentation is required
         */
        "color": Color;
        /**
          * Set to "block" for a full-width button or to "full" for a full-width button without left and right borders.
         */
        "expand": Expand;
        "fill": Fill;
        /**
          * Documentation is required
         */
        "text": string;
    }
    interface HakionDarkModeToggle {
        "mode": string;
    }
    interface HakionRippleEffect {
    }
    interface HakionUiRoot {
    }
    interface MyAlert {
        /**
          * The first name
         */
        "text": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ThreeElementExample {
    }
}
declare global {
    interface HTMLHakionButtonElement extends Components.HakionButton, HTMLStencilElement {
    }
    var HTMLHakionButtonElement: {
        prototype: HTMLHakionButtonElement;
        new (): HTMLHakionButtonElement;
    };
    interface HTMLHakionDarkModeToggleElement extends Components.HakionDarkModeToggle, HTMLStencilElement {
    }
    var HTMLHakionDarkModeToggleElement: {
        prototype: HTMLHakionDarkModeToggleElement;
        new (): HTMLHakionDarkModeToggleElement;
    };
    interface HTMLHakionRippleEffectElement extends Components.HakionRippleEffect, HTMLStencilElement {
    }
    var HTMLHakionRippleEffectElement: {
        prototype: HTMLHakionRippleEffectElement;
        new (): HTMLHakionRippleEffectElement;
    };
    interface HTMLHakionUiRootElement extends Components.HakionUiRoot, HTMLStencilElement {
    }
    var HTMLHakionUiRootElement: {
        prototype: HTMLHakionUiRootElement;
        new (): HTMLHakionUiRootElement;
    };
    interface HTMLMyAlertElement extends Components.MyAlert, HTMLStencilElement {
    }
    var HTMLMyAlertElement: {
        prototype: HTMLMyAlertElement;
        new (): HTMLMyAlertElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLThreeElementExampleElement extends Components.ThreeElementExample, HTMLStencilElement {
    }
    var HTMLThreeElementExampleElement: {
        prototype: HTMLThreeElementExampleElement;
        new (): HTMLThreeElementExampleElement;
    };
    interface HTMLElementTagNameMap {
        "hakion-button": HTMLHakionButtonElement;
        "hakion-dark-mode-toggle": HTMLHakionDarkModeToggleElement;
        "hakion-ripple-effect": HTMLHakionRippleEffectElement;
        "hakion-ui-root": HTMLHakionUiRootElement;
        "my-alert": HTMLMyAlertElement;
        "my-component": HTMLMyComponentElement;
        "three-element-example": HTMLThreeElementExampleElement;
    }
}
declare namespace LocalJSX {
    interface HakionButton {
        /**
          * Documentation is required
         */
        "color"?: Color;
        /**
          * Set to "block" for a full-width button or to "full" for a full-width button without left and right borders.
         */
        "expand"?: Expand;
        "fill"?: Fill;
        /**
          * Define interface for argument type. You can access Props() in detail. eg: event.details.when
         */
        "onAcknowledge"?: (event: CustomEvent<AcknowledgeEvent>) => void;
        /**
          * Documentation is required
         */
        "text"?: string;
    }
    interface HakionDarkModeToggle {
        "mode"?: string;
    }
    interface HakionRippleEffect {
    }
    interface HakionUiRoot {
    }
    interface MyAlert {
        /**
          * The first name
         */
        "text"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ThreeElementExample {
    }
    interface IntrinsicElements {
        "hakion-button": HakionButton;
        "hakion-dark-mode-toggle": HakionDarkModeToggle;
        "hakion-ripple-effect": HakionRippleEffect;
        "hakion-ui-root": HakionUiRoot;
        "my-alert": MyAlert;
        "my-component": MyComponent;
        "three-element-example": ThreeElementExample;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "hakion-button": LocalJSX.HakionButton & JSXBase.HTMLAttributes<HTMLHakionButtonElement>;
            "hakion-dark-mode-toggle": LocalJSX.HakionDarkModeToggle & JSXBase.HTMLAttributes<HTMLHakionDarkModeToggleElement>;
            "hakion-ripple-effect": LocalJSX.HakionRippleEffect & JSXBase.HTMLAttributes<HTMLHakionRippleEffectElement>;
            "hakion-ui-root": LocalJSX.HakionUiRoot & JSXBase.HTMLAttributes<HTMLHakionUiRootElement>;
            "my-alert": LocalJSX.MyAlert & JSXBase.HTMLAttributes<HTMLMyAlertElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "three-element-example": LocalJSX.ThreeElementExample & JSXBase.HTMLAttributes<HTMLThreeElementExampleElement>;
        }
    }
}
